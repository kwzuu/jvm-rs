use crate::bytecode::BytecodeParseError::{EarlyEnd, InvalidOpcode};
use std::slice::Iter;

#[repr(u8)]
#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
/// JVM SE7 Bytecode Instructions
pub enum Instruction {
    /// Do nothing, I suppose.
    Nop,
    /// Load `null` onto the operand stack
    AconstNull,
    /// Load `-1 as i32` onto the operand stack
    IconstM1,
    /// Load `0 as i32` onto the operand stack
    Iconst0,
    /// Load `1 as i32` onto the operand stack
    Iconst1,
    /// Load `2 as i32` onto the operand stack
    Iconst2,
    /// Load `3 as i32` onto the operand stack
    Iconst3,
    /// Load `4 as i32` onto the operand stack
    Iconst4,
    /// Load `5 as i32` onto the operand stack
    Iconst5,
    /// Load `0 as i64` onto the operand stack
    Lconst0,
    /// Load `1 as i64` onto the operand stack
    Lconst1,
    /// Load `0 as f32` onto the operand stack
    Fconst0,
    /// Load `1 as f32` onto the operand stack
    Fconst1,
    /// Load `2 as f32` onto the operand stack
    Fconst2,
    /// Load `0 as f64` onto the operand stack
    Dconst0,
    /// Load `1 as f64` onto the operand stack
    Dconst1,
    Bipush(u8),
    Sipush(u16),
    Ldc(u8),
    LdcW(u16),
    Ldc2W(u16),
    Iload(u8),
    Lload(u8),
    Fload(u8),
    Dload(u8),
    Aload(u8),
    Iload0,
    Iload1,
    Iload2,
    Iload3,
    Lload0,
    Lload1,
    Lload2,
    Lload3,
    Fload0,
    Fload1,
    Fload2,
    Fload3,
    Dload0,
    Dload1,
    Dload2,
    Dload3,
    Aload0,
    Aload1,
    Aload2,
    Aload3,
    Iaload,
    Laload,
    Faload,
    Daload,
    /// Find item at index of array by popping arrayref
    /// and index from the operand stack, and then push it
    /// to the operand stack.
    Aaload,
    Baload,
    Caload,
    Saload,
    Istore(u8),
    Lstore(u8),
    Fstore(u8),
    Dstore(u8),
    Astore(u8),
    Istore0,
    Istore1,
    Istore2,
    Istore3,
    Lstore0,
    Lstore1,
    Lstore2,
    Lstore3,
    Fstore0,
    Fstore1,
    Fstore2,
    Fstore3,
    Dstore0,
    Dstore1,
    Dstore2,
    Dstore3,
    Astore0,
    Astore1,
    Astore2,
    Astore3,
    Iastore,
    Lastore,
    Fastore,
    Dastore,
    
    Aastore,
    Bastore,
    Castore,
    Sastore,
    Pop,
    Pop2,
    Dup,
    DupX1,
    DupX2,
    Dup2,
    Dup2X1,
    Dup2X2,
    Swap,
    Iadd,
    Ladd,
    Fadd,
    Dadd,
    Isub,
    Lsub,
    Fsub,
    Dsub,
    Imul,
    Lmul,
    Fmul,
    Dmul,
    Idiv,
    Ldiv,
    Fdiv,
    Ddiv,
    Irem,
    Lrem,
    Frem,
    Drem,
    Ineg,
    Lneg,
    Fneg,
    Dneg,
    Ishl,
    Lshl,
    Ishr,
    Lshr,
    Iushr,
    Lushr,
    Iand,
    Land,
    Ior,
    Lor,
    Ixor,
    Lxor,
    Iinc(u8, i8),
    I2l,
    I2f,
    I2d,
    L2i,
    L2f,
    L2d,
    F2i,
    F2l,
    F2d,
    D2i,
    D2l,
    D2f,
    I2b,
    I2c,
    I2s,
    Lcmp,
    Fcmpl,
    Fcmpg,
    Dcmpl,
    Dcmpg,
    Ifeq(u16),
    Ifne(u16),
    Iflt(u16),
    Ifge(u16),
    Ifgt(u16),
    Ifle(u16),
    IfIcmpeq(u16),
    IfIcmpne(u16),
    IfIcmplt(u16),
    IfIcmpge(u16),
    IfIcmpgt(u16),
    IfIcmple(u16),
    IfAcmpeq(u16),
    IfAcmpne(u16),
    Goto(u16),
    Tableswitch,  // TODO: implement
    Lookupswitch, // TODO: implement
    Ireturn,
    Lreturn,
    Freturn,
    Dreturn,
    Areturn,
    Return,
    Getstatic(u16),
    Putstatic(u16),
    Getfield(u16),
    Putfield(u16),
    Invokevirtual(u16),
    Invokespecial(u16),
    Invokestatic(u16),
    Invokeinterface(u16),
    Invokedynamic(u16),
    New(u16),
    Newarray(u8),
    Anewarray(u16),
    Arraylength,
    Athrow,
    Checkcast(u16),
    Instanceof(u16),
    Monitorenter,
    Monitorexit,
    Wide3(u8, u16),
    Wide5(u8, u16, u16),
    Multianewarray(u16, u8),
    Ifnull(u16),
    Ifnonnull(u16),
    GotoW(u32),
    Breakpoint,
    Impdep1,
    Impdep2,
}

pub enum BytecodeParseError {
    EarlyEnd,
    InvalidOpcode(u8),
}

impl Instruction {
    pub fn read_from(i: &mut Iter<u8>) -> Result<Instruction, BytecodeParseError> {
        fn next_u1(i: &mut Iter<u8>) -> Result<u8, BytecodeParseError> {
            i.next().ok_or(EarlyEnd).map(|x| *x)
        }
        fn next_i1(i: &mut Iter<u8>) -> Result<i8, BytecodeParseError> {
            Ok(i8::from_be_bytes(next_u1(i)?.to_be_bytes()))
        }

        fn next_u2(i: &mut Iter<u8>) -> Result<u16, BytecodeParseError> {
            let hi = next_u1(i)? as u16;
            let lo = next_u1(i)? as u16;
            Ok(hi << 8 | lo)
        }

        fn next_u4(i: &mut Iter<u8>) -> Result<u32, BytecodeParseError> {
            let hi = next_u2(i)? as u32;
            let lo = next_u2(i)? as u32;
            Ok(hi << 16 | lo)
        }

        if let Some(x) = i.next() {
            return Ok(match *x {
                0x00 => Self::Nop,
                0x01 => Self::AconstNull,
                0x02 => Self::IconstM1,
                0x03 => Self::Iconst0,
                0x04 => Self::Iconst1,
                0x05 => Self::Iconst2,
                0x06 => Self::Iconst3,
                0x07 => Self::Iconst4,
                0x08 => Self::Iconst5,
                0x09 => Self::Lconst0,
                0x0a => Self::Lconst1,
                0x0b => Self::Fconst0,
                0x0c => Self::Fconst1,
                0x0d => Self::Fconst2,
                0x0e => Self::Dconst0,
                0x0f => Self::Dconst1,
                0x10 => Self::Bipush(next_u1(i)?),
                0x11 => Self::Sipush(next_u2(i)?),
                0x12 => Self::Ldc(next_u1(i)?),
                0x13 => Self::LdcW(next_u2(i)?),
                0x14 => Self::Ldc2W(next_u2(i)?),
                0x15 => Self::Iload(next_u1(i)?),
                0x16 => Self::Lload(next_u1(i)?),
                0x17 => Self::Fload(next_u1(i)?),
                0x18 => Self::Dload(next_u1(i)?),
                0x19 => Self::Aload(next_u1(i)?),
                0x1a => Self::Iload0,
                0x1b => Self::Iload1,
                0x1c => Self::Iload2,
                0x1d => Self::Iload3,
                0x1e => Self::Lload0,
                0x1f => Self::Lload1,
                0x20 => Self::Lload2,
                0x21 => Self::Lload3,
                0x22 => Self::Fload0,
                0x23 => Self::Fload1,
                0x24 => Self::Fload2,
                0x25 => Self::Fload3,
                0x26 => Self::Dload0,
                0x27 => Self::Dload1,
                0x28 => Self::Dload2,
                0x29 => Self::Dload3,
                0x2a => Self::Aload0,
                0x2b => Self::Aload1,
                0x2c => Self::Aload2,
                0x2d => Self::Aload3,
                0x2e => Self::Iaload,
                0x2f => Self::Laload,
                0x30 => Self::Faload,
                0x31 => Self::Daload,
                0x32 => Self::Aaload,
                0x33 => Self::Baload,
                0x34 => Self::Caload,
                0x35 => Self::Saload,
                0x36 => Self::Istore(next_u1(i)?),
                0x37 => Self::Lstore(next_u1(i)?),
                0x38 => Self::Fstore(next_u1(i)?),
                0x39 => Self::Dstore(next_u1(i)?),
                0x3a => Self::Astore(next_u1(i)?),
                0x3b => Self::Istore0,
                0x3c => Self::Istore1,
                0x3d => Self::Istore2,
                0x3e => Self::Istore3,
                0x3f => Self::Lstore0,
                0x40 => Self::Lstore1,
                0x41 => Self::Lstore2,
                0x42 => Self::Lstore3,
                0x43 => Self::Fstore0,
                0x44 => Self::Fstore1,
                0x45 => Self::Fstore2,
                0x46 => Self::Fstore3,
                0x47 => Self::Dstore0,
                0x48 => Self::Dstore1,
                0x49 => Self::Dstore2,
                0x4a => Self::Dstore3,
                0x4b => Self::Astore0,
                0x4c => Self::Astore1,
                0x4d => Self::Astore2,
                0x4e => Self::Astore3,
                0x4f => Self::Iastore,
                0x50 => Self::Lastore,
                0x51 => Self::Fastore,
                0x52 => Self::Dastore,
                0x53 => Self::Aastore,
                0x54 => Self::Bastore,
                0x55 => Self::Castore,
                0x56 => Self::Sastore,
                0x57 => Self::Pop,
                0x58 => Self::Pop2,
                0x59 => Self::Dup,
                0x5a => Self::DupX1,
                0x5b => Self::DupX2,
                0x5c => Self::Dup2,
                0x5d => Self::Dup2X1,
                0x5e => Self::Dup2X2,
                0x5f => Self::Swap,
                0x60 => Self::Iadd,
                0x61 => Self::Ladd,
                0x62 => Self::Fadd,
                0x63 => Self::Dadd,
                0x64 => Self::Isub,
                0x65 => Self::Lsub,
                0x66 => Self::Fsub,
                0x67 => Self::Dsub,
                0x68 => Self::Imul,
                0x69 => Self::Lmul,
                0x6a => Self::Fmul,
                0x6b => Self::Dmul,
                0x6c => Self::Idiv,
                0x6d => Self::Ldiv,
                0x6e => Self::Fdiv,
                0x6f => Self::Ddiv,
                0x70 => Self::Irem,
                0x71 => Self::Lrem,
                0x72 => Self::Frem,
                0x73 => Self::Drem,
                0x74 => Self::Ineg,
                0x75 => Self::Lneg,
                0x76 => Self::Fneg,
                0x77 => Self::Dneg,
                0x78 => Self::Ishl,
                0x79 => Self::Lshl,
                0x7a => Self::Ishr,
                0x7b => Self::Lshr,
                0x7c => Self::Iushr,
                0x7d => Self::Lushr,
                0x7e => Self::Iand,
                0x7f => Self::Land,
                0x80 => Self::Ior,
                0x81 => Self::Lor,
                0x82 => Self::Ixor,
                0x83 => Self::Lxor,
                0x84 => Self::Iinc(next_u1(i)?, next_i1(i)?),
                0x85 => Self::I2l,
                0x86 => Self::I2f,
                0x87 => Self::I2d,
                0x88 => Self::L2i,
                0x89 => Self::L2f,
                0x8a => Self::L2d,
                0x8b => Self::F2i,
                0x8c => Self::F2l,
                0x8d => Self::F2d,
                0x8e => Self::D2i,
                0x8f => Self::D2l,
                0x90 => Self::D2f,
                0x91 => Self::I2b,
                0x92 => Self::I2c,
                0x93 => Self::I2s,
                0x94 => Self::Lcmp,
                0x95 => Self::Fcmpl,
                0x96 => Self::Fcmpg,
                0x97 => Self::Dcmpl,
                0x98 => Self::Dcmpg,
                0x99 => Self::Ifeq(next_u2(i)?),
                0x9a => Self::Ifne(next_u2(i)?),
                0x9b => Self::Iflt(next_u2(i)?),
                0x9c => Self::Ifge(next_u2(i)?),
                0x9d => Self::Ifgt(next_u2(i)?),
                0x9e => Self::Ifle(next_u2(i)?),
                0x9f => Self::IfIcmpeq(next_u2(i)?),
                0xa0 => Self::IfIcmpne(next_u2(i)?),
                0xa1 => Self::IfIcmplt(next_u2(i)?),
                0xa2 => Self::IfIcmpge(next_u2(i)?),
                0xa3 => Self::IfIcmpgt(next_u2(i)?),
                0xa4 => Self::IfIcmple(next_u2(i)?),
                0xa5 => Self::IfAcmpeq(next_u2(i)?),
                0xa6 => Self::IfAcmpne(next_u2(i)?),
                0xa7 => Self::Goto(next_u2(i)?),
                0xaa => Self::Tableswitch,
                0xab => Self::Lookupswitch,
                0xac => Self::Ireturn,
                0xad => Self::Lreturn,
                0xae => Self::Freturn,
                0xaf => Self::Dreturn,
                0xb0 => Self::Areturn,
                0xb1 => Self::Return,
                0xb2 => Self::Getstatic(next_u2(i)?),
                0xb3 => Self::Putstatic(next_u2(i)?),
                0xb4 => Self::Getfield(next_u2(i)?),
                0xb5 => Self::Putfield(next_u2(i)?),
                0xb6 => Self::Invokevirtual(next_u2(i)?),
                0xb7 => Self::Invokespecial(next_u2(i)?),
                0xb8 => Self::Invokestatic(next_u2(i)?),
                0xb9 => Self::Invokeinterface(next_u2(i)?),
                0xba => Self::Invokedynamic(next_u2(i)?),
                0xbb => Self::New(next_u2(i)?),
                0xbc => Self::Newarray(next_u1(i)?),
                0xbd => Self::Anewarray(next_u2(i)?),
                0xbe => Self::Arraylength,
                0xbf => Self::Athrow,
                0xc0 => Self::Checkcast(next_u2(i)?),
                0xc1 => Self::Instanceof(next_u2(i)?),
                0xc2 => Self::Monitorenter,
                0xc3 => Self::Monitorexit,
                0xc4 => Self::Wide3(next_u1(i)?, next_u2(i)?),
                0xc5 => Self::Multianewarray(next_u2(i)?, next_u1(i)?),
                0xc6 => Self::Ifnull(next_u2(i)?),
                0xc7 => Self::Ifnonnull(next_u2(i)?),
                0xc8 => Self::GotoW(next_u4(i)?),
                0xca => Self::Breakpoint,
                0xfe => Self::Impdep1,
                0xff => Self::Impdep2,
                x => return Err(InvalidOpcode(x)),
            });
        }
        Err(EarlyEnd)
    }
}
